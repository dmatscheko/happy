import org.apache.commons.compress.archivers.ar.ArArchiveInputStream

plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.hassosonandroid'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.hassosonandroid"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.tukaani:xz:1.10'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task downloadAndUnpackQemu {
    description 'Downloads and unpacks the QEMU binary from the Termux repository.'
    group 'Setup'

    doLast {
        def termuxRepoUrl = "https://packages.termux.dev/apt/termux-main/"
        def packagesUrl = new URL(termuxRepoUrl + "dists/stable/main/binary-aarch64/Packages")
        def qemuPackageName = "qemu-system-aarch64-headless"
        def jniDir = new File(project.projectDir, "src/main/jniLibs/aarch64")
        def buildDir = project.buildDir
        def qemuDeb = new File(buildDir, "qemu.deb")
        def unpackDir = new File(buildDir, "qemu_unpack")
        def qemuBinary = new File(jniDir, qemuPackageName)

        // Only run if the binary doesn't already exist
        if (qemuBinary.exists()) {
            println "QEMU binary already exists. Skipping download."
            return
        }

        println ">>> Finding QEMU package URL..."
        def qemuFilename = ""
        packagesUrl.withReader { reader ->
            def inTargetPackageBlock = false
            reader.eachLine { line ->
                // If we found the filename, we can stop completely.
                if (!qemuFilename.isEmpty()) {
                    return
                }

                // Reset when we hit a blank line separating packages
                if (line.trim().isEmpty()) {
                    inTargetPackageBlock = false
                    return // continue to next line
                }

                if (line == "Package: " + qemuPackageName) {
                    inTargetPackageBlock = true
                }

                if (inTargetPackageBlock && line.startsWith("Filename: ")) {
                    qemuFilename = line.substring("Filename: ".length())
                }
            }
        }

        if (qemuFilename.isEmpty()) {
            throw new GradleException("Could not find $qemuPackageName in Packages index.")
        }

        def qemuUrl = new URL(termuxRepoUrl + qemuFilename)
        println ">>> Downloading QEMU from $qemuUrl..."
        qemuDeb.withOutputStream { outputStream ->
            qemuUrl.withInputStream { inputStream ->
                outputStream << inputStream
            }
        }

        println ">>> Unpacking QEMU with Java..."
        unpackDir.mkdirs()
        def dataFile = new File(unpackDir, "data.tar.xz")

        new ArArchiveInputStream(new FileInputStream(qemuDeb)).withCloseable { arInput ->
            def entry = arInput.getNextEntry()
            while (entry != null) {
                if (entry.getName() == "data.tar.xz") {
                    println ">>> Found data.tar.xz, extracting..."
                    new FileOutputStream(dataFile).withCloseable { fileOut ->
                        arInput.transferTo(fileOut)
                    }
                    break // Exit loop once found and extracted
                }
                entry = arInput.getNextEntry()
            }
        }

        if (!dataFile.exists()) {
            throw new GradleException("data.tar.xz not found in .deb archive.")
        }

        project.exec {
            commandLine 'tar', '-xf', dataFile.absolutePath
            workingDir unpackDir
        }

        def sourceBinaryPath = "data/data/com.termux/files/usr/bin/" + qemuPackageName
        def sourceBinary = new File(unpackDir, sourceBinaryPath)
        if (!sourceBinary.exists()) {
            throw new GradleException("QEMU binary not found in data.tar.xz.")
        }

        println ">>> Copying QEMU binary to jniLibs..."
        jniDir.mkdirs()
        sourceBinary.renameTo(qemuBinary)

        println ">>> Cleaning up..."
        qemuDeb.delete()
        unpackDir.deleteDir()
    }
}

preBuild.dependsOn downloadAndUnpackQemu
